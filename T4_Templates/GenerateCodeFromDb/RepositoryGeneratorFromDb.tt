<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="$(TargetDir)\_Imports.ttinclude" #>
<#@ output extension=".txt" #>

<#@ include file="$(TargetDir)\T4.FileManager.VisualStudio.ttinclude" #>
<#@ include file="$(TargetDir)\_DbAccess.ttinclude" #>

<#
var schemaReader = new SchemaReader();
var fileManager = new T4FileManager(this);

foreach(var name in schemaReader.ReadTables())
{
    fileManager.StartNewFile("I" + name + "Repository.g.cs","","FromDb/Repositories");
#>
using System;
using GenerateCodeFromDb.FromDb.Entities;

namespace GenerateCodeFromDb.FromDb.Repositories
{
    public partial interface I<#= name #>Repository
    {
        int Create(<#= name #> <#= name.ToLower() #>);
        <#= name #> FindById(int id);
        void Update(<#= name #> <#= name.ToLower() #>);
        void Delete(<#= name #> <#= name.ToLower() #>);
    }
}

<#
fileManager.Process();
};
#>


<#

foreach(var name in schemaReader.ReadTables())
{
    fileManager.StartNewFile(name + "Repository.g.cs","","FromDb/Repositories");
#>
using System;
using System.Data;
using System.Linq;
using Dapper;
using GenerateCodeFromDb.FromDb.Entities;

namespace GenerateCodeFromDb.FromDb.Repositories
{
    public partial class <#= name #>Repository : I<#= name #>Repository
    {
        private readonly IDbConnection connection;

        public <#= name #>Repository(IDbConnection connection)
        {
            this.connection = connection;
        }

        public int Create(<#= name #> <#= name.ToLower() #>)
        {
            var sql = @"<#= GenerateInsert(name, schemaReader.ReadColumns(name))#>";
            
            return this.connection.Query<int>(sql, <#= name.ToLower() #>).Single();
        }

        public <#= name #> FindById(int id)
        {
            var sql = @"<#= GenerateSelect(name, schemaReader.ReadColumns(name))#>";

            return this.connection.Query<<#= name #>>(sql, new {Id = id}).FirstOrDefault();
        }
        
        public void Update(<#= name #> <#= name.ToLower() #>)
        {
            var sql = @"<#= GenerateUpdate(name, schemaReader.ReadColumns(name))#>";

            this.connection.Execute(sql, <#= name.ToLower() #>);
        }
        
        public void Delete(<#= name #> <#= name.ToLower() #>)
        {
            var sql = "DELETE FROM <#= name #> WHERE Id = @Id";

            this.connection.Execute(sql, new {Id = <#= name.ToLower() #>.Id});
        }
    }
}

<#
fileManager.Process();
};
#>



<#+

public string GenerateInsert(string table, List<Column> columns)
{
    var sb = new StringBuilder();
    sb.AppendLine();
    sb.AppendLine("INSERT INTO dbo." + table + "(");

    var index = 0;
    foreach(var col in columns)
    {
        if(col.Name == "Id")
        {
            continue;
        }
        if(index > 0)
        {
        sb.Append(",");
        }

        sb.AppendLine($"[{col.Name}]");
        index++;
    }

    sb.AppendLine(") VALUES (");
    index = 0;
    foreach(var col in columns)
    {
        if(col.Name == "Id")
        {
            continue;
        }
        if(index > 0)
        {
        sb.Append(",");
        }

        sb.AppendLine($"@{col.Name}");
        index++;
    }
    sb.AppendLine(")");

    sb.AppendLine("SELECT CAST(SCOPE_IDENTITY() as INT);");

    return sb.ToString();
}

public string GenerateSelect(string table, List<Column> columns)
{
    var sb = new StringBuilder();
    sb.AppendLine();
    sb.AppendLine("SELECT");

    var index = 0;
    foreach(var col in columns)
    {
        if(index > 0)
        {
        sb.Append(",");
        }

        sb.AppendLine($"[{col.Name}]");
        index++;
    }

    sb.AppendLine("FROM dbo." + table);
    sb.AppendLine("WHERE Id = @Id");

    return sb.ToString();
}

public string GenerateUpdate(string table, List<Column> columns)
{
    var sb = new StringBuilder();
    sb.AppendLine();
    sb.AppendLine("UPDATE dbo." + table);
    sb.AppendLine("SET");

    var index = 0;
    foreach(var col in columns)
    {
        if(col.Name == "Id")
        {
            continue;
        }
        if(index > 0)
        {
        sb.Append(",");
        }

        sb.AppendLine($"[{col.Name}] = @{col.Name}");
        index++;
    }

    sb.AppendLine("WHERE Id = @Id");

    return sb.ToString();
}

#>